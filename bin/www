#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('zaslon_test:server');
var http = require('http');


//var request = require('request');




/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Listen i2c and sockets
 */


//var io = require('socket.io').listen(server);
var Logs = require('./logs.js');
var io = require('socket.io')(server);

var connectionsArray = [];

var charts = require('./charts.js');


function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}


io.sockets.on('connection', function (socket) {
    console.log("Number of connections: " + connectionsArray.length);
    if (!connectionsArray.length) {
        var log_getter = setTimeout(function getter(){
            var tmp_obj = Logs.getLogs();
            io.sockets.emit('send', tmp_obj);
            //console.log("Get logs: " + tmp_obj);
            setTimeout(getter, 5000);
        }, 1);
        log_getter.unref();
    }

    setInterval(function(){
        var chart_obj = getRandomInt(0,100);
        console.log("random obj = "+ chart_obj);
        socket.emit('pushdata', chart_obj);
    },2000);

   /* socket.on('getCharts', function(socket){
        var chart_obj = charts.getCharts();
        console.log("www -> Got 'getCharts' event!");
        console.log("www -> chart_obj: \n" + chart_obj);
        io.sockets.emit('chart_data', chart_obj);
    });*/

    socket.on('disconnect', function(socket){
        var socketIndex = connectionsArray.indexOf(socket);
        console.log("Socket == " + socketIndex + " disconnected.");
        if (socketIndex >= 0) {
            connectionsArray.splice(socketIndex, 1);
        }
    });

    console.log("A new socket is connected!");
    connectionsArray.push(socket);
});

io.sockets.on("sensors", function(){
    console.log("___________________ EMIT SENSORS ______________________");
    var options = {
        host: '192.168.1.156',
        port: 80,
        path: '/dht'
    };
    http.get(options, function(resp){
        resp.on('data', function(chunk){
            //do something with chunk
            console.log("_______CHUNK: " + chunk);
            socket.emit("sensor_chunk", "qwe");
        });
    }).on("error", function(e){
        console.log("____________________ Got error: " + e.message + "___________________");
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
