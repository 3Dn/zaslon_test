#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('zaslon_test:server');
var http = require('http');
var us = require('underscore');

//var request = require('request');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Enable RTSP
 */

/*
Stream = require('node-rtsp-stream');
var stream = new Stream({
    name: 'live1.sdp',
    streamUrl: 'rtsp://192.168.1.53/live1.sdp',
    wsPort: 9999
});
*/


/**
 * Listen i2c and sockets
 */

var Logs = require('./logs.js');
var Ligth_log = require('./logs_engine');
var Graph_kph = require('./graph_engine');
var io = require('socket.io')(server);

var connectionsArray = [];
var scale_1 = [];
var scale_2 = [];
var all_history_1 = [];
var all_history_2 = [];

var charts = require('./charts.js');

Logs.dailyLogs();
Logs.scale_1_log_hour();

var last_log = Ligth_log.log_read('sys', 3);

function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

io.sockets.on('connection', function (socket) {
    console.log("Number of connections: " + connectionsArray.length);
    var ID = (socket.id).toString();
    var time = (new Date).toLocaleTimeString();
    Graph_kph.killogram_per_hour('scale1_log', function(ret){
        scale_1 = ret;
    });
    Graph_kph.killogram_per_hour('scale2_log', function(ret){
        scale_2 = ret;
    });
    Graph_kph.all_history('scale1_log', function(ret){
        all_history_1 = ret;
    });
    Graph_kph.all_history('scale2_log', function(ret){
        all_history_2 = ret;
    });

    io.sockets.emit('all_history', {'all_history_1': all_history_1, 'all_history_2': all_history_2});
    io.sockets.emit('kgph', {'scale_1' : scale_1, 'scale_2' : scale_2});

    socket.emit('sys_to_ligth_home_log_users_count', {'users_count': connectionsArray.length+1});
    io.sockets.emit('sys_to_ligth_home_log_users_count', {'users_count': connectionsArray.length+1});

    //socket.emit('sys_to_ligth_home_log_last_logs', {'data': last_log});
    //io.sockets.emit('sys_to_ligth_home_log_last_logs', {'data': last_log});

    socket.emit('sys_to_web', {'event': 'connected', 'name': ID, 'time': time});
    socket.broadcast.emit('sys_to_web', {'event': 'userJoined', 'name': ID, 'time': time});

    socket.on('sys', function (msg) {
        var time = (new Date).toLocaleTimeString();
        socket.emit('sys', {'event': 'messageSent', 'name': ID, 'text': msg, 'time': time});
        socket.broadcast.emit('sys', {'event': 'messageReceived', 'name': ID, 'text': msg, 'time': time})
    });

    socket.on('daily_logs', function(){
        var daily = Logs.dailyLogs();
        //console.log(daily);
        socket.emit('scale_log', daily);
    });

    socket.on('chart_refresh', function(data){
        var chart_data =  Logs.chart_log(data.from, data.to);
        console.log(chart_data );
        socket.emit("chart_refresh_data", chart_data);
    });

    socket.on('scale_1_log_hour', function(){
    });

    if (!connectionsArray.length) {
        var curr='';
        var log_getter = setTimeout(function getter(){
            var tmp_obj = Logs.getLogs();
            var scale_1_log_hour = Logs.scale_1_log_hour();
            var scale_2_log_hour = Logs.scale_2_log_hour();
            var scale_1_log_day = Logs.scale_1_log_day();
            var scale_2_log_day = Logs.scale_2_log_day();
            //console.log("www -> " + g_kgph);
            if(curr != tmp_obj){
                io.sockets.emit('send', tmp_obj);
                curr = tmp_obj;
            }
            io.sockets.emit('scale_log_home_page', {'scale_1_hour': scale_1_log_hour, 'scale_2_hour': scale_2_log_hour, 'scale_1_day': scale_1_log_day, 'scale_2_day': scale_2_log_day});
            io.sockets.emit('scale_lchart', {'scale_1_hour': scale_1_log_hour, 'scale_2_hour': scale_2_log_hour});
            //console.log("Get logs: " + tmp_obj);
            setTimeout(getter, 2000);
        }, 1);
        log_getter.unref();
    }

  /*  socket.on("sensors", function(){
        //setImmediate(function(){
            console.log("___________________ EMIT SENSORS ______________________");
            var options = {
                host: '192.168.1.156',
                port: 80,
                path: '/dht'
            };
            http.get(options, function(resp){
                var qwe='';
                resp.on('data', function(chunk){
                    //do something with chunk
                    //console.log("_______CHUNK: " + chunk);
                    //io.sockets.emit("sensor_chunk", chunk);
                    qwe += chunk;

                });

                resp.on('end', function(){
                   socket.emit('sensor_chunk', qwe);
                });
            }).on("error", function(e){
                console.log("____________________ Got error: " + e.message + "___________________");
            });
        //});
    });*/


   /* setInterval(function(){
        var chart_obj = getRandomInt(0,100);
        //console.log("random obj = "+ chart_obj);
        socket.emit('pushdata', chart_obj);
    },2000);*/

   /* socket.on('getCharts', function(socket){
        var chart_obj = charts.getCharts();
        console.log("www -> Got 'getCharts' event!");
        console.log("www -> chart_obj: \n" + chart_obj);
        io.sockets.emit('chart_data', chart_obj);
    });*/

    socket.on('ready', function(data){
        socket.emit('r', {'reconnect' : 'Welcome back!', 'last_news': last_log});
    });

    socket.on('disconnect', function(){
        var time = (new Date).toLocaleTimeString();
        var socketIndex = connectionsArray.indexOf(socket);
        console.log("Socket == " + socketIndex + " disconnected.");
        if (socketIndex >= 0) {
            connectionsArray.splice(socketIndex, 1);
        }
        io.sockets.emit('sys', {'event': 'userSplit', 'name': ID, 'time': time});
        io.sockets.emit('sys_to_ligth_home_log_users_count', {'users_count': connectionsArray.length});
    });

    console.log("A new socket is connected!");
    connectionsArray.push(socket);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
